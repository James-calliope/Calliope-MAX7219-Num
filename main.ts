//% weight=5 color=#2699BF icon="\uf1ec"
namespace MatrixDisplay {
    // display matrix data
    let dispMatrix: number[][] = [
        [0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C],//0
        [0x10, 0x18, 0x14, 0x10, 0x10, 0x10, 0x10, 0x10],//1
        [0x7E, 0x2, 0x2, 0x7E, 0x40, 0x40, 0x40, 0x7E],//2
        [0x3E, 0x2, 0x2, 0x3E, 0x2, 0x2, 0x3E, 0x0],//3
        [0x8, 0x18, 0x28, 0x48, 0xFE, 0x8, 0x8, 0x8],//4
        [0x3C, 0x20, 0x20, 0x3C, 0x4, 0x4, 0x3C, 0x0],//5
        [0x3C, 0x20, 0x20, 0x3C, 0x24, 0x24, 0x3C, 0x0],//6
        [0x3E, 0x22, 0x4, 0x8, 0x8, 0x8, 0x8, 0x8],//7
        [0x0, 0x3E, 0x22, 0x22, 0x3E, 0x22, 0x22, 0x3E],//8
        [0x3E, 0x22, 0x22, 0x3E, 0x2, 0x2, 0x2, 0x3E],//9
        [0x8, 0x14, 0x22, 0x3E, 0x22, 0x22, 0x22, 0x22],//A
        [0x3C, 0x22, 0x22, 0x3E, 0x22, 0x22, 0x3C, 0x0],//B
        [0x3C, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3C, 0x0],//C
        [0x7C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7C, 0x0],//D
        [0x7C, 0x40, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x7C],//E
        [0x7C, 0x40, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x40],//F
        [0x3C, 0x40, 0x40, 0x40, 0x40, 0x44, 0x44, 0x3C],//G
        [0x44, 0x44, 0x44, 0x7C, 0x44, 0x44, 0x44, 0x44],//H
        [0x7C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7C],//I
        [0x3C, 0x8, 0x8, 0x8, 0x8, 0x8, 0x48, 0x30],//J
        [0x0, 0x24, 0x28, 0x30, 0x20, 0x30, 0x28, 0x24],//K
        [0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7C],//L
        [0x81, 0xC3, 0xA5, 0x99, 0x81, 0x81, 0x81, 0x81],//M
        [0x0, 0x42, 0x62, 0x52, 0x4A, 0x46, 0x42, 0x0],//N
        [0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C],//O
        [0x3C, 0x22, 0x22, 0x22, 0x3C, 0x20, 0x20, 0x20],//P
        [0x1C, 0x22, 0x22, 0x22, 0x22, 0x26, 0x22, 0x1D],//Q
        [0x3C, 0x22, 0x22, 0x22, 0x3C, 0x24, 0x22, 0x21],//R
        [0x0, 0x1E, 0x20, 0x20, 0x3E, 0x2, 0x2, 0x3C],//S
        [0x0, 0x3E, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8],//T
        [0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x22, 0x1C],//U
        [0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x24, 0x18],//V
        [0x0, 0x49, 0x49, 0x49, 0x49, 0x2A, 0x1C, 0x0],//W
        [0x0, 0x41, 0x22, 0x14, 0x8, 0x14, 0x22, 0x41],//X
        [0x41, 0x22, 0x14, 0x8, 0x8, 0x8, 0x8, 0x8],//Y
        [0x0, 0x7F, 0x2, 0x4, 0x8, 0x10, 0x20, 0x7F],//Z
        [0x8, 0x7F, 0x49, 0x49, 0x7F, 0x8, 0x8, 0x8],//中
        [0xFE, 0xBA, 0x92, 0xBA, 0x92, 0x9A, 0xBA, 0xFE]//国    
    ]

    function Write_Max7219(cmd: number, dat: number) {
        cmd &= 0x0f;
        pins.digitalWritePin(DigitalPin.P0, 0);         // P0: CS
        for (let i = 0; i < 8; i++)		//写入地址，只使用低4位
        {
            pins.digitalWritePin(DigitalPin.P1, 0);     // P1: CLK
            if (cmd & 0x80)		//逐位发送数据
                pins.digitalWritePin(DigitalPin.P2, 1); // P2: DIN
            else
                pins.digitalWritePin(DigitalPin.P2, 0);
            cmd <<= 1;
            pins.digitalWritePin(DigitalPin.P1, 1);		//时钟的上升沿将数据打入MAX7219
        }
        for (let i = 0; i < 8; i++)		//写入数据
        {
            pins.digitalWritePin(DigitalPin.P1, 0);
            if (dat & 0x80)
                pins.digitalWritePin(DigitalPin.P2, 1);
            else
                pins.digitalWritePin(DigitalPin.P2, 0);
            dat <<= 1;
            pins.digitalWritePin(DigitalPin.P1, 1);
        }
        pins.digitalWritePin(DigitalPin.P0, 1);	//LOAD上升沿将最后的16位数据存入MAX7219的内部寄存器
        pins.digitalWritePin(DigitalPin.P1, 0);
        pins.digitalWritePin(DigitalPin.P1, 1);
    }

    //% block="MatrixInit"
    export function MatrixInit() {
        basic.pause(500);
        Write_Max7219(0x09, 0x00);       //译码方式：BCD码
        Write_Max7219(0x0a, 0x03);       //亮度 
        Write_Max7219(0x0b, 0x07);       //扫描界限；8个数码管显示
        Write_Max7219(0x0c, 0x01);       //掉电模式：0，普通模式：1
        Write_Max7219(0x0f, 0x00);       //显示测试：1；测试结束，正常显示：0  
    }

    //% block="Display Number %n"
    export function DisplayNumber(n: number) {
        for (let i = 1; i < 9; i++) {
            Write_Max7219(i, dispMatrix[n][i - 1]);
        }
    }
}
